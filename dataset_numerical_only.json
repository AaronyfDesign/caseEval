{
  "metadata": {
    "timestamp": "2025-09-04T17:10:19.616011",
    "total_datasets": 4,
    "keywords_count": 55,
    "output_format": "json",
    "filter_info": {
      "filtered_string_cases": true,
      "total_original_cases": 411,
      "remaining_cases": 139,
      "removed_string_cases": 272
    }
  },
  "datasets": {
    "HumanEval": {
      "total_cases": 6,
      "numerical_cases": 6,
      "percentage": 11.76,
      "cases": [
        {
          "task_id": "HumanEval/0",
          "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
          "entry_point": "has_close_elements",
          "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
          "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
          "_dataset_source": "HumanEval",
          "_matched_keywords": [
            "tan"
          ]
        },
        {
          "task_id": "HumanEval/2",
          "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
          "entry_point": "truncate_number",
          "canonical_solution": "    return number % 1.0\n",
          "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
          "_dataset_source": "HumanEval",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "task_id": "HumanEval/71",
          "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
          "entry_point": "triangle_area",
          "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
          "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
          "_dataset_source": "HumanEval",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "task_id": "HumanEval/92",
          "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
          "entry_point": "any_int",
          "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
          "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
          "_dataset_source": "HumanEval",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "task_id": "HumanEval/103",
          "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
          "entry_point": "rounded_avg",
          "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
          "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
          "_dataset_source": "HumanEval",
          "_matched_keywords": [
            "compute"
          ]
        },
        {
          "task_id": "HumanEval/130",
          "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
          "entry_point": "tri",
          "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
          "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
          "_dataset_source": "HumanEval",
          "_matched_keywords": [
            "math"
          ]
        }
      ]
    },
    "MBPP": {
      "total_cases": 44,
      "numerical_cases": 44,
      "percentage": 34.65,
      "cases": [
        {
          "task_id": 24,
          "text": "Write a function to convert the given binary number to its decimal equivalent.",
          "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
          "test_list": [
            "assert binary_to_decimal(100) == 4",
            "assert binary_to_decimal(1011) == 11",
            "assert binary_to_decimal(1101101) == 109"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "task_id": 33,
          "text": "Write a python function to convert a decimal number to binary number.",
          "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
          "test_list": [
            "assert decimal_To_Binary(10) == 1010",
            "assert decimal_To_Binary(1) == 1",
            "assert decimal_To_Binary(20) == 10100"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "task_id": 52,
          "text": "Write a function to caluclate area of a parallelogram.",
          "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
          "test_list": [
            "assert parallelogram_area(10,20)==200",
            "assert parallelogram_area(15,20)==300",
            "assert parallelogram_area(8,9)==72"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "log"
          ]
        },
        {
          "task_id": 64,
          "text": "Write a function to sort a list of tuples using lambda.",
          "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
          "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math",
            "sin",
            "log",
            "physics",
            "chemistry"
          ]
        },
        {
          "task_id": 76,
          "text": "Write a python function to count the number of squares in a rectangle.",
          "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
          "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(2,2) == 5",
            "assert count_Squares(1,1) == 1"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "tan"
          ]
        },
        {
          "task_id": 93,
          "text": "Write a function to calculate the value of 'a' to the power 'b'.",
          "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
          "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "task_id": 107,
          "text": "Write a python function to count hexadecimal numbers for a given range.",
          "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
          "test_list": [
            "assert count_Hexadecimal(10,15) == 6",
            "assert count_Hexadecimal(2,4) == 0",
            "assert count_Hexadecimal(15,16) == 1"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "task_id": 108,
          "text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
          "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
          "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "task_id": 123,
          "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
          "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
          "test_list": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "task_id": 124,
          "text": "Write a function to get the angle of a complex number.",
          "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
          "test_list": [
            "assert angle_complex(0,1j)==1.5707963267948966 ",
            "assert angle_complex(2,1j)==0.4636476090008061",
            "assert angle_complex(0,2j)==1.5707963267948966"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "task_id": 127,
          "text": "Write a function to multiply two integers without using the * operator in python.",
          "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
          "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "task_id": 133,
          "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
          "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
          "test_list": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin",
            "calculate"
          ]
        },
        {
          "task_id": 148,
          "text": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
          "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
          "test_list": [
            "assert sum_digits_twoparts(35)==17",
            "assert sum_digits_twoparts(7)==7",
            "assert sum_digits_twoparts(100)==19"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "task_id": 162,
          "text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
          "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
          "test_list": [
            "assert sum_series(6)==12",
            "assert sum_series(10)==30",
            "assert sum_series(9)==25"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate",
            "series"
          ]
        },
        {
          "task_id": 163,
          "text": "Write a function to calculate the area of a regular polygon.",
          "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
          "test_list": [
            "assert area_polygon(4,20)==400.00000000000006",
            "assert area_polygon(10,15)==1731.1969896610804",
            "assert area_polygon(9,7)==302.90938549487214"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math",
            "tan",
            "calculate"
          ]
        },
        {
          "task_id": 164,
          "text": "Write a python function to check whether the sum of divisors are same or not.",
          "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
          "test_list": [
            "assert areEquivalent(36,57) == False",
            "assert areEquivalent(2,4) == False",
            "assert areEquivalent(23,47) == True"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "task_id": 169,
          "text": "Write a function to calculate the nth pell number.",
          "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
          "test_list": [
            "assert get_pell(4) == 12",
            "assert get_pell(7) == 169",
            "assert get_pell(8) == 408"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "task_id": 180,
          "text": "Write a function to calculate distance between two points using latitude and longitude.",
          "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
          "test_list": [
            "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
            "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
            "assert distance_lat_long(10,20,30,40)==6783.751974994595"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math",
            "sin",
            "cos",
            "tan",
            "calculate"
          ]
        },
        {
          "task_id": 194,
          "text": "Write a python function to convert octal number to decimal number.",
          "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
          "test_list": [
            "assert octal_To_Decimal(25) == 21",
            "assert octal_To_Decimal(30) == 24",
            "assert octal_To_Decimal(40) == 32"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "task_id": 214,
          "text": "Write a function to convert radians to degrees.",
          "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
          "test_list": [
            "assert degree_radian(90)==5156.620156177409",
            "assert degree_radian(60)==3437.746770784939",
            "assert degree_radian(120)==6875.493541569878"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "task_id": 222,
          "text": "Write a function to check if all the elements in tuple have same data type or not.",
          "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
          "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "task_id": 246,
          "text": "Write a function for computing square roots using the babylonian method.",
          "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
          "test_list": [
            "assert babylonian_squareroot(10)==3.162277660168379",
            "assert babylonian_squareroot(2)==1.414213562373095",
            "assert babylonian_squareroot(9)==3.0"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin",
            "root"
          ]
        },
        {
          "task_id": 248,
          "text": "Write a function to calculate the harmonic sum of n-1.",
          "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
          "test_list": [
            "assert harmonic_sum(7) == 2.5928571428571425",
            "assert harmonic_sum(4) == 2.083333333333333",
            "assert harmonic_sum(19) == 3.547739657143682"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "task_id": 253,
          "text": "Write a python function to count integers from a given list.",
          "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
          "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "task_id": 261,
          "text": "Write a function to perform mathematical division operation across the given tuples.",
          "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
          "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "task_id": 264,
          "text": "Write a function to calculate a dog's age in dog's years.",
          "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
          "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "task_id": 282,
          "text": "Write a function to substaract two lists using map and lambda function.",
          "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
          "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "task_id": 288,
          "text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
          "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
          "test_list": [
            "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
            "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
            "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "inv"
          ]
        },
        {
          "task_id": 296,
          "text": "Write a python function to count inversions in an array.",
          "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
          "test_list": [
            "assert get_Inv_Count([1,20,6,4,5],5) == 5",
            "assert get_Inv_Count([1,2,1],3) == 1",
            "assert get_Inv_Count([1,2,5,6,1],5) == 3"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "inv"
          ]
        },
        {
          "task_id": 299,
          "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
          "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
          "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "task_id": 303,
          "text": "Write a python function to check whether the count of inversion of two types are same or not.",
          "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
          "test_list": [
            "assert solve([1,0,2],3) == True",
            "assert solve([1,2,0],3) == False",
            "assert solve([1,2,1],3) == True"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "inv"
          ]
        },
        {
          "task_id": 320,
          "text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
          "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
          "test_list": [
            "assert sum_difference(12)==5434",
            "assert sum_difference(20)==41230",
            "assert sum_difference(54)==2151270"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "task_id": 347,
          "text": "Write a python function to count the number of squares in a rectangle.",
          "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
          "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(1,2) == 2",
            "assert count_Squares(2,2) == 5"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "tan"
          ]
        },
        {
          "task_id": 355,
          "text": "Write a python function to count the number of rectangles in a circle of radius r.",
          "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
          "test_list": [
            "assert count_Rectangles(2) == 8",
            "assert count_Rectangles(1) == 1",
            "assert count_Rectangles(0) == 0"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "tan"
          ]
        },
        {
          "task_id": 359,
          "text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
          "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
          "test_list": [
            "assert Check_Solution(1,3,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\"",
            "assert Check_Solution(1,-5,6) == \"No\""
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "quad",
            "equation",
            "root"
          ]
        },
        {
          "task_id": 367,
          "text": "Write a function to check if a binary tree is balanced or not.",
          "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
          "test_list": [
            "assert is_tree_balanced(root) == False",
            "assert is_tree_balanced(root1) == True",
            "assert is_tree_balanced(root2) == False "
          ],
          "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "root"
          ]
        },
        {
          "task_id": 399,
          "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
          "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
          "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "task_id": 402,
          "text": "Write a function to compute the value of ncr%p.",
          "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
          "test_list": [
            "assert ncr_modp(10,2,13)==6",
            "assert ncr_modp(15,12,43)==25",
            "assert ncr_modp(17,9,18)==10"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "compute"
          ]
        },
        {
          "task_id": 448,
          "text": "Write a function to calculate the sum of perrin numbers.",
          "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
          "test_list": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "task_id": 452,
          "text": "Write a function that gives loss amount if the given amount has loss else return none.",
          "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
          "test_list": [
            "assert loss_amount(1500,1200)==None",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "cos"
          ]
        },
        {
          "task_id": 467,
          "text": "Write a python function to convert decimal number to octal number.",
          "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
          "test_list": [
            "assert decimal_to_Octal(10) == 12",
            "assert decimal_to_Octal(2) == 2",
            "assert decimal_to_Octal(33) == 41"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "task_id": 475,
          "text": "Write a function to sort counter by value.",
          "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
          "test_list": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "math",
            "physics",
            "chemistry"
          ]
        },
        {
          "task_id": 486,
          "text": "Write a function to compute binomial probability for the given number.",
          "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
          "test_list": [
            "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
            "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
            "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "compute"
          ]
        },
        {
          "task_id": 506,
          "text": "Write a function to calculate the permutation coefficient of given p(n, k).",
          "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
          "test_list": [
            "assert permutation_coefficient(10, 2) == 90",
            "assert permutation_coefficient(10, 3) == 720",
            "assert permutation_coefficient(10, 1) == 10"
          ],
          "test_setup_code": "",
          "challenge_test_list": [],
          "_dataset_source": "MBPP",
          "_matched_keywords": [
            "calculate"
          ]
        }
      ]
    },
    "MBPP_original": {
      "total_cases": 89,
      "numerical_cases": 89,
      "percentage": 38.2,
      "cases": [
        {
          "text": "Write a python function to identify non-prime numbers.",
          "code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
          "task_id": 3,
          "test_setup_code": "",
          "test_list": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to convert the given binary number to its decimal equivalent.",
          "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
          "task_id": 24,
          "test_setup_code": "",
          "test_list": [
            "assert binary_to_decimal(100) == 4",
            "assert binary_to_decimal(1011) == 11",
            "assert binary_to_decimal(1101101) == 109"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "text": "Write a python function to convert a decimal number to binary number.",
          "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
          "task_id": 33,
          "test_setup_code": "",
          "test_list": [
            "assert decimal_To_Binary(10) == 1010",
            "assert decimal_To_Binary(1) == 1",
            "assert decimal_To_Binary(20) == 10100"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "text": "Write a function to caluclate area of a parallelogram.",
          "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
          "task_id": 52,
          "test_setup_code": "",
          "test_list": [
            "assert parallelogram_area(10,20)==200",
            "assert parallelogram_area(15,20)==300",
            "assert parallelogram_area(8,9)==72"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "log"
          ]
        },
        {
          "text": "Write a function to sort a list of tuples using lambda.",
          "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
          "task_id": 64,
          "test_setup_code": "",
          "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "sin",
            "log",
            "physics",
            "chemistry"
          ]
        },
        {
          "text": "Write a python function to count the number of squares in a rectangle.",
          "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
          "task_id": 76,
          "test_setup_code": "",
          "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(2,2) == 5",
            "assert count_Squares(1,1) == 1"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "tan"
          ]
        },
        {
          "text": "Write a function to calculate the value of 'a' to the power 'b'.",
          "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
          "task_id": 93,
          "test_setup_code": "",
          "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a python function to count hexadecimal numbers for a given range.",
          "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
          "task_id": 107,
          "test_setup_code": "",
          "test_list": [
            "assert count_Hexadecimal(10,15) == 6",
            "assert count_Hexadecimal(2,4) == 0",
            "assert count_Hexadecimal(15,16) == 1"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
          "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
          "task_id": 108,
          "test_setup_code": "",
          "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
          "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
          "task_id": 123,
          "test_setup_code": "",
          "test_list": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "text": "Write a function to get the angle of a complex number.",
          "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
          "task_id": 124,
          "test_setup_code": "",
          "test_list": [
            "assert angle_complex(0,1j)==1.5707963267948966 ",
            "assert angle_complex(2,1j)==0.4636476090008061",
            "assert angle_complex(0,2j)==1.5707963267948966"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to multiply two integers without using the * operator in python.",
          "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
          "task_id": 127,
          "test_setup_code": "",
          "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
          "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
          "task_id": 133,
          "test_setup_code": "",
          "test_list": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "calculate"
          ]
        },
        {
          "text": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
          "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
          "task_id": 148,
          "test_setup_code": "",
          "test_list": [
            "assert sum_digits_twoparts(35)==17",
            "assert sum_digits_twoparts(7)==7",
            "assert sum_digits_twoparts(100)==19"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
          "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
          "task_id": 162,
          "test_setup_code": "",
          "test_list": [
            "assert sum_series(6)==12",
            "assert sum_series(10)==30",
            "assert sum_series(9)==25"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate",
            "series"
          ]
        },
        {
          "text": "Write a function to calculate the area of a regular polygon.",
          "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
          "task_id": 163,
          "test_setup_code": "",
          "test_list": [
            "assert area_polygon(4,20)==400.00000000000006",
            "assert area_polygon(10,15)==1731.1969896610804",
            "assert area_polygon(9,7)==302.90938549487214"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "tan",
            "calculate"
          ]
        },
        {
          "text": "Write a python function to check whether the sum of divisors are same or not.",
          "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
          "task_id": 164,
          "test_setup_code": "",
          "test_list": [
            "assert areEquivalent(36,57) == False",
            "assert areEquivalent(2,4) == False",
            "assert areEquivalent(23,47) == True"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to calculate the nth pell number.",
          "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
          "task_id": 169,
          "test_setup_code": "",
          "test_list": [
            "assert get_pell(4) == 12",
            "assert get_pell(7) == 169",
            "assert get_pell(8) == 408"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function to calculate distance between two points using latitude and longitude.",
          "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
          "task_id": 180,
          "test_setup_code": "",
          "test_list": [
            "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
            "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
            "assert distance_lat_long(10,20,30,40)==6783.751974994595"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "sin",
            "cos",
            "tan",
            "calculate"
          ]
        },
        {
          "text": "Write a python function to convert octal number to decimal number.",
          "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
          "task_id": 194,
          "test_setup_code": "",
          "test_list": [
            "assert octal_To_Decimal(25) == 21",
            "assert octal_To_Decimal(30) == 24",
            "assert octal_To_Decimal(40) == 32"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "text": "Write a function to convert radians to degrees.",
          "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
          "task_id": 214,
          "test_setup_code": "",
          "test_list": [
            "assert degree_radian(90)==5156.620156177409",
            "assert degree_radian(60)==3437.746770784939",
            "assert degree_radian(120)==6875.493541569878"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to check if all the elements in tuple have same data type or not.",
          "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
          "task_id": 222,
          "test_setup_code": "",
          "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "text": "Write a function for computing square roots using the babylonian method.",
          "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
          "task_id": 246,
          "test_setup_code": "",
          "test_list": [
            "assert babylonian_squareroot(10)==3.162277660168379",
            "assert babylonian_squareroot(2)==1.414213562373095",
            "assert babylonian_squareroot(9)==3.0"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "root"
          ]
        },
        {
          "text": "Write a function to calculate the harmonic sum of n-1.",
          "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
          "task_id": 248,
          "test_setup_code": "",
          "test_list": [
            "assert harmonic_sum(7) == 2.5928571428571425",
            "assert harmonic_sum(4) == 2.083333333333333",
            "assert harmonic_sum(19) == 3.547739657143682"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a python function to count integers from a given list.",
          "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
          "task_id": 253,
          "test_setup_code": "",
          "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "text": "Write a function to perform mathematical division operation across the given tuples.",
          "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
          "task_id": 261,
          "test_setup_code": "",
          "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to calculate a dog's age in dog's years.",
          "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
          "task_id": 264,
          "test_setup_code": "",
          "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function to substaract two lists using map and lambda function.",
          "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
          "task_id": 282,
          "test_setup_code": "",
          "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
          "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
          "task_id": 288,
          "test_setup_code": "",
          "test_list": [
            "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
            "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
            "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "inv"
          ]
        },
        {
          "text": "Write a python function to count inversions in an array.",
          "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
          "task_id": 296,
          "test_setup_code": "",
          "test_list": [
            "assert get_Inv_Count([1,20,6,4,5],5) == 5",
            "assert get_Inv_Count([1,2,1],3) == 1",
            "assert get_Inv_Count([1,2,5,6,1],5) == 3"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "inv"
          ]
        },
        {
          "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
          "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
          "task_id": 299,
          "test_setup_code": "",
          "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a python function to check whether the count of inversion of two types are same or not.",
          "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
          "task_id": 303,
          "test_setup_code": "",
          "test_list": [
            "assert solve([1,0,2],3) == True",
            "assert solve([1,2,0],3) == False",
            "assert solve([1,2,1],3) == True"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "inv"
          ]
        },
        {
          "text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
          "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
          "task_id": 320,
          "test_setup_code": "",
          "test_list": [
            "assert sum_difference(12)==5434",
            "assert sum_difference(20)==41230",
            "assert sum_difference(54)==2151270"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a python function to count the number of squares in a rectangle.",
          "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
          "task_id": 347,
          "test_setup_code": "",
          "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(1,2) == 2",
            "assert count_Squares(2,2) == 5"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "tan"
          ]
        },
        {
          "text": "Write a python function to count the number of rectangles in a circle of radius r.",
          "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
          "task_id": 355,
          "test_setup_code": "",
          "test_list": [
            "assert count_Rectangles(2) == 8",
            "assert count_Rectangles(1) == 1",
            "assert count_Rectangles(0) == 0"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "tan"
          ]
        },
        {
          "text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
          "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
          "task_id": 359,
          "test_setup_code": "",
          "test_list": [
            "assert Check_Solution(1,3,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\"",
            "assert Check_Solution(1,-5,6) == \"No\""
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "quad",
            "equation",
            "root"
          ]
        },
        {
          "text": "Write a function to check if a binary tree is balanced or not.",
          "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
          "task_id": 367,
          "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)",
          "test_list": [
            "assert is_tree_balanced(root) == False",
            "assert is_tree_balanced(root1) == True",
            "assert is_tree_balanced(root2) == False "
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "root"
          ]
        },
        {
          "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
          "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
          "task_id": 399,
          "test_setup_code": "",
          "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to compute the value of ncr%p.",
          "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
          "task_id": 402,
          "test_setup_code": "",
          "test_list": [
            "assert ncr_modp(10,2,13)==6",
            "assert ncr_modp(15,12,43)==25",
            "assert ncr_modp(17,9,18)==10"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "compute"
          ]
        },
        {
          "text": "Write a function to calculate the sum of perrin numbers.",
          "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
          "task_id": 448,
          "test_setup_code": "",
          "test_list": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function that gives loss amount if the given amount has loss else return none.",
          "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
          "task_id": 452,
          "test_setup_code": "",
          "test_list": [
            "assert loss_amount(1500,1200)==None",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "cos"
          ]
        },
        {
          "text": "Write a python function to convert decimal number to octal number.",
          "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
          "task_id": 467,
          "test_setup_code": "",
          "test_list": [
            "assert decimal_to_Octal(10) == 12",
            "assert decimal_to_Octal(2) == 2",
            "assert decimal_to_Octal(33) == 41"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "decimal"
          ]
        },
        {
          "text": "Write a function to sort counter by value.",
          "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
          "task_id": 475,
          "test_setup_code": "",
          "test_list": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "physics",
            "chemistry"
          ]
        },
        {
          "text": "Write a function to compute binomial probability for the given number.",
          "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
          "task_id": 486,
          "test_setup_code": "",
          "test_list": [
            "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
            "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
            "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "compute"
          ]
        },
        {
          "text": "Write a function to calculate the permutation coefficient of given p(n, k).",
          "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
          "task_id": 506,
          "test_setup_code": "",
          "test_list": [
            "assert permutation_coefficient(10, 2) == 90",
            "assert permutation_coefficient(10, 3) == 720",
            "assert permutation_coefficient(10, 1) == 10"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function to sort a list of elements using radix sort.",
          "code": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums",
          "task_id": 516,
          "test_setup_code": "",
          "test_list": [
            "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
            "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
            "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to calculate volume of a tetrahedron.",
          "code": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)",
          "task_id": 519,
          "test_setup_code": "",
          "test_list": [
            "assert volume_tetrahedron(10)==117.85",
            "assert volume_tetrahedron(15)==397.75",
            "assert volume_tetrahedron(20)==942.81"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "calculate"
          ]
        },
        {
          "text": "Write a function to remove particular data type elements from the given tuple.",
          "code": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ",
          "task_id": 533,
          "test_setup_code": "",
          "test_list": [
            "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
            "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
            "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "text": "Write a python function to calculate the product of the unique numbers of a given list.",
          "code": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p",
          "task_id": 573,
          "test_setup_code": "",
          "test_list": [
            "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
            "assert unique_product([1, 2, 3, 1,]) == 6",
            "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function to extract the even elements in the nested mixed tuple.",
          "code": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ",
          "task_id": 580,
          "test_setup_code": "",
          "test_list": [
            "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
            "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
            "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "text": "Write a python function to check whether the given number is even or not using bitwise operator.",
          "code": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ",
          "task_id": 600,
          "test_setup_code": "",
          "test_list": [
            "assert is_Even(1) == False",
            "assert is_Even(2) == True",
            "assert is_Even(3) == False"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to convert degrees to radians.",
          "code": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian",
          "task_id": 606,
          "test_setup_code": "",
          "test_list": [
            "assert radian_degree(90)==1.5707963267948966",
            "assert radian_degree(60)==1.0471975511965976",
            "assert radian_degree(120)==2.0943951023931953"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to divide two lists using map and lambda function.",
          "code": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)",
          "task_id": 618,
          "test_setup_code": "",
          "test_list": [
            "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
            "assert div_list([3,2],[1,4])==[3.0, 0.5]",
            "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
          "code": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
          "task_id": 636,
          "test_setup_code": "",
          "test_list": [
            "assert Check_Solution(2,0,2) == \"Yes\"",
            "assert Check_Solution(2,-5,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\""
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "quad",
            "equation",
            "root"
          ]
        },
        {
          "text": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
          "code": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
          "task_id": 649,
          "test_setup_code": "",
          "test_list": [
            "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
            "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
            "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
          "code": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d",
          "task_id": 653,
          "test_setup_code": "",
          "test_list": [
            "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
            "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
            "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
          "code": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False",
          "task_id": 670,
          "test_setup_code": "",
          "test_list": [
            "assert decreasing_trend([-4,-3,-2,-1]) == True",
            "assert decreasing_trend([1,2,3]) == True",
            "assert decreasing_trend([3,2,1]) == False"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a python function to set the right most unset bit.",
          "code": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ",
          "task_id": 671,
          "test_setup_code": "",
          "test_list": [
            "assert set_Right_most_Unset_Bit(21) == 23",
            "assert set_Right_most_Unset_Bit(11) == 15",
            "assert set_Right_most_Unset_Bit(15) == 15"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "log"
          ]
        },
        {
          "text": "Write a function to multiply two lists using map and lambda function.",
          "code": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)",
          "task_id": 682,
          "test_setup_code": "",
          "test_list": [
            "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
            "assert mul_list([1,2],[3,4])==[3,8]",
            "assert mul_list([90,120],[50,70])==[4500,8400]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to get the length of a complex number.",
          "code": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length",
          "task_id": 688,
          "test_setup_code": "",
          "test_list": [
            "assert len_complex(3,4)==5.0",
            "assert len_complex(9,10)==13.45362404707371",
            "assert len_complex(7,9)==11.40175425099138"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to calculate the harmonic sum of n-1.",
          "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))",
          "task_id": 704,
          "test_setup_code": "",
          "test_list": [
            "assert harmonic_sum(10)==2.9289682539682538",
            "assert harmonic_sum(4)==2.083333333333333",
            "assert harmonic_sum(7)==2.5928571428571425 "
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function to count the same pair in two given lists using map function.",
          "code": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result",
          "task_id": 723,
          "test_setup_code": "",
          "test_list": [
            "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
            "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
            "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to add two lists using map and lambda function.",
          "code": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)",
          "task_id": 729,
          "test_setup_code": "",
          "test_list": [
            "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
            "assert add_list([1,2],[3,4])==[4,6]",
            "assert add_list([10,20],[50,70])==[60,90]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to calculate the geometric sum of n-1.",
          "code": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)",
          "task_id": 738,
          "test_setup_code": "",
          "test_list": [
            "assert geometric_sum(7) == 1.9921875",
            "assert geometric_sum(4) == 1.9375",
            "assert geometric_sum(8) == 1.99609375"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function to caluclate the area of a tetrahedron.",
          "code": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area",
          "task_id": 742,
          "test_setup_code": "",
          "test_list": [
            "assert area_tetrahedron(3)==15.588457268119894",
            "assert area_tetrahedron(20)==692.8203230275509",
            "assert area_tetrahedron(10)==173.20508075688772"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a python function to check whether the count of divisors is even or odd.",
          "code": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ",
          "task_id": 781,
          "test_setup_code": "",
          "test_list": [
            "assert count_Divisors(10) == \"Even\"",
            "assert count_Divisors(100) == \"Odd\"",
            "assert count_Divisors(125) == \"Even\""
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a function to calculate the perimeter of a regular polygon.",
          "code": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter",
          "task_id": 789,
          "test_setup_code": "",
          "test_list": [
            "assert perimeter_polygon(4,20)==80",
            "assert perimeter_polygon(10,15)==150",
            "assert perimeter_polygon(9,7)==63"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "tan",
            "calculate"
          ]
        },
        {
          "text": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
          "code": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr",
          "task_id": 815,
          "test_setup_code": "",
          "test_list": [
            "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
            "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
            "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to round up a number to specific digits.",
          "code": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)",
          "task_id": 830,
          "test_setup_code": "",
          "test_list": [
            "assert round_up(123.01247,0)==124",
            "assert round_up(123.01247,1)==123.1",
            "assert round_up(123.01247,2)==123.02"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math"
          ]
        },
        {
          "text": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
          "code": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ",
          "task_id": 840,
          "test_setup_code": "",
          "test_list": [
            "assert Check_Solution(2,0,-1) == \"Yes\"",
            "assert Check_Solution(1,-5,6) == \"No\"",
            "assert Check_Solution(2,0,2) == \"Yes\""
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "quad",
            "equation",
            "root"
          ]
        },
        {
          "text": "Write a function to count the number of inversions in the given array.",
          "code": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ",
          "task_id": 841,
          "test_setup_code": "",
          "test_list": [
            "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
            "assert get_inv_count([8, 4, 2, 1], 4) == 6",
            "assert get_inv_count([3, 1, 2], 3) == 2"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "inv"
          ]
        },
        {
          "text": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
          "code": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap",
          "task_id": 854,
          "test_setup_code": "",
          "test_list": [
            "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
            "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
            "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to print n-times a list using map function.",
          "code": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)",
          "task_id": 865,
          "test_setup_code": "",
          "test_list": [
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
          "code": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)",
          "task_id": 870,
          "test_setup_code": "",
          "test_list": [
            "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
            "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
            "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "calculate"
          ]
        },
        {
          "text": "Write a function to solve the fibonacci sequence using recursion.",
          "code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))",
          "task_id": 873,
          "test_setup_code": "",
          "test_list": [
            "assert fibonacci(7) == 13",
            "assert fibonacci(8) == 21",
            "assert fibonacci(9) == 34"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to caluclate perimeter of a parallelogram.",
          "code": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter",
          "task_id": 882,
          "test_setup_code": "",
          "test_list": [
            "assert parallelogram_perimeter(10,20)==400",
            "assert parallelogram_perimeter(15,20)==600",
            "assert parallelogram_perimeter(8,9)==144"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "log"
          ]
        },
        {
          "text": "Write a python function to check whether the given number is odd or not using bitwise operator.",
          "code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ",
          "task_id": 887,
          "test_setup_code": "",
          "test_list": [
            "assert is_odd(5) == True",
            "assert is_odd(6) == False",
            "assert is_odd(7) == True"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
          "code": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])",
          "task_id": 911,
          "test_setup_code": "",
          "test_list": [
            "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
            "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
            "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "compute"
          ]
        },
        {
          "text": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
          "code": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ",
          "task_id": 915,
          "test_setup_code": "",
          "test_list": [
            "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
            "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
            "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin"
          ]
        },
        {
          "text": "Write a python function to calculate the product of all the numbers of a given tuple.",
          "code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product",
          "task_id": 925,
          "test_setup_code": "",
          "test_list": [
            "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
            "assert mutiple_tuple((1,2,3)) == 6",
            "assert mutiple_tuple((-2,-4,-6)) == -48"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate"
          ]
        },
        {
          "text": "Write a function to calculate the height of the given binary tree.",
          "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1",
          "task_id": 927,
          "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot1 = Node(1);  \r\nroot1.left = Node(2);  \r\nroot1.right = Node(3);  \r\nroot1.left.left = Node(4);  \r\nroot1.right.left = Node(5);  \r\nroot1.right.right = Node(6);  \r\nroot1.right.right.right= Node(7);  \r\nroot1.right.right.right.right = Node(8)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(6)\r\nroot2.left.left.right = Node(7)",
          "test_list": [
            "assert (max_height(root)) == 3",
            "assert (max_height(root1)) == 5 ",
            "assert (max_height(root2)) == 4"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate",
            "root"
          ]
        },
        {
          "text": "Write a function to calculate the sum of series 1³+2³+3³+….+n³.",
          "code": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total",
          "task_id": 931,
          "test_setup_code": "",
          "test_list": [
            "assert sum_series(7)==784",
            "assert sum_series(5)==225",
            "assert sum_series(15)==14400"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "calculate",
            "series"
          ]
        },
        {
          "text": "Write a function to calculate the sum of series 1²+2²+3²+….+n².",
          "code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total",
          "task_id": 935,
          "test_setup_code": "",
          "test_list": [
            "assert series_sum(6)==91",
            "assert series_sum(7)==140",
            "assert series_sum(12)==650"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "calculate",
            "series"
          ]
        },
        {
          "text": "Write a function to sort a list of dictionaries using lambda function.",
          "code": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models",
          "task_id": 939,
          "test_setup_code": "",
          "test_list": [
            "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
            "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
            "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "model"
          ]
        },
        {
          "text": "Write a function to count the elements in a list until an element is a tuple.",
          "code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim",
          "task_id": 941,
          "test_setup_code": "",
          "test_list": [
            "assert count_elim([10,20,30,(10,20),40])==3",
            "assert count_elim([10,(20,30),(10,20),40])==1",
            "assert count_elim([(10,(20,30,(10,20),40))])==0"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "sin",
            "tan"
          ]
        },
        {
          "text": "Write a function to compute the value of ncr mod p.",
          "code": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ",
          "task_id": 952,
          "test_setup_code": "",
          "test_list": [
            "assert nCr_mod_p(10, 2, 13) == 6",
            "assert nCr_mod_p(11, 3, 14) == 11",
            "assert nCr_mod_p(18, 14, 19) == 1"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "compute"
          ]
        },
        {
          "text": "Write a function that gives profit amount if the given amount has profit else return none.",
          "code": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None",
          "task_id": 954,
          "test_setup_code": "",
          "test_list": [
            "assert profit_amount(1500,1200)==300",
            "assert profit_amount(100,200)==None",
            "assert profit_amount(2000,5000)==None"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "cos"
          ]
        },
        {
          "text": "Write a python function to get the position of rightmost set bit.",
          "code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1",
          "task_id": 957,
          "test_setup_code": "",
          "test_list": [
            "assert get_First_Set_Bit_Pos(12) == 3",
            "assert get_First_Set_Bit_Pos(18) == 2",
            "assert get_First_Set_Bit_Pos(16) == 5"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "math",
            "log"
          ]
        },
        {
          "text": "Write a function to calculate the discriminant value.",
          "code": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)",
          "task_id": 963,
          "test_setup_code": "",
          "test_list": [
            "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
            "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
            "assert discriminant_value(0,0,9)==(\"one solution\",0)"
          ],
          "challenge_test_list": [],
          "_dataset_source": "MBPP_original",
          "_matched_keywords": [
            "NaN",
            "calculate"
          ]
        }
      ]
    }
  },
  "summary": {
    "total_cases": 1638,
    "numerical_cases": 411,
    "success_datasets": 3,
    "failed_datasets": 1
  }
}